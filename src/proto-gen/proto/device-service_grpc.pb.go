// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package device_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceProviderServiceClient is the client API for DeviceProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceProviderServiceClient interface {
	ListDevices(ctx context.Context, in *GetDeviceListRequest, opts ...grpc.CallOption) (*DeviceListResponse, error)
}

type deviceProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceProviderServiceClient(cc grpc.ClientConnInterface) DeviceProviderServiceClient {
	return &deviceProviderServiceClient{cc}
}

func (c *deviceProviderServiceClient) ListDevices(ctx context.Context, in *GetDeviceListRequest, opts ...grpc.CallOption) (*DeviceListResponse, error) {
	out := new(DeviceListResponse)
	err := c.cc.Invoke(ctx, "/device_service.DeviceProviderService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceProviderServiceServer is the server API for DeviceProviderService service.
// All implementations must embed UnimplementedDeviceProviderServiceServer
// for forward compatibility
type DeviceProviderServiceServer interface {
	ListDevices(context.Context, *GetDeviceListRequest) (*DeviceListResponse, error)
	mustEmbedUnimplementedDeviceProviderServiceServer()
}

// UnimplementedDeviceProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceProviderServiceServer struct {
}

func (UnimplementedDeviceProviderServiceServer) ListDevices(context.Context, *GetDeviceListRequest) (*DeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDeviceProviderServiceServer) mustEmbedUnimplementedDeviceProviderServiceServer() {}

// UnsafeDeviceProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceProviderServiceServer will
// result in compilation errors.
type UnsafeDeviceProviderServiceServer interface {
	mustEmbedUnimplementedDeviceProviderServiceServer()
}

func RegisterDeviceProviderServiceServer(s grpc.ServiceRegistrar, srv DeviceProviderServiceServer) {
	s.RegisterService(&DeviceProviderService_ServiceDesc, srv)
}

func _DeviceProviderService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProviderServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_service.DeviceProviderService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProviderServiceServer).ListDevices(ctx, req.(*GetDeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceProviderService_ServiceDesc is the grpc.ServiceDesc for DeviceProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device_service.DeviceProviderService",
	HandlerType: (*DeviceProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _DeviceProviderService_ListDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/device-service.proto",
}
